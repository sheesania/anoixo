- name: ensure ubuntu packages
  hosts: staging, production
  tags: apt
  become: yes
  tasks:
    - name: add key for node PPA
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: configure node PPA
      apt_repository:
        repo: deb https://deb.nodesource.com/node_12.x bionic main
        filename: nodesource
        state: present

    - name: install apt packages
      apt:
        pkg: "{{ item }}"
        update_cache: yes
      loop:
        - git
        - nodejs
        - basex
        - nginx
        - python3.8
        - python3-venv
        - python3.8-venv
        - supervisor

- name: setup firewall
  hosts: staging, production
  tags: firewall
  become: yes
  tasks:
    - name: deny all ports by default (disabling firewall to not lock ourselves out)
      ufw:
        state: disabled
        direction: incoming
        default: deny
    - name: allow openssh
      ufw:
        rule: allow
        name: OpenSSH
    - name: allow nginx
      ufw:
        rule: allow
        name: 'Nginx Full'
    - name: enable firewall
      ufw:
        state: enabled

- name: create accounts
  hosts: staging, production
  tags: accounts
  become: yes
  tasks:
    - name: create anoixo user
      user:
        name: "{{ anoixo_username }}"
        password: "{{ anoixo_password | password_hash('sha512') }}"
        shell: /bin/bash
    - name: create basex user
      user:
        name: "{{ basex_username }}"
        password: "{{ basex_password | password_hash('sha512') }}"
        shell: /bin/bash

- name: setup basexserver service
  hosts: staging, production
  tags: db
  become: yes
  vars_files:
    - public_vars.yaml
  tasks:
    - name: install systemd unit file
      template: 
        src: templates/basexserver.service
        dest: "{{ systemd_abs_dir }}/basexserver.service"
    - name: have service start on boot, and start it
      service:
        name: basexserver
        enabled: yes
        state: restarted

- name: create basex server user
  hosts: staging, production
  tags: db
  become: yes
  become_user: "{{ basex_username }}"
  tasks:
    - name: update admin password
      command: "basex -c 'ALTER PASSWORD admin {{ basex_server_admin_password }}'"
    - name: create basex server user
      command: "basex -c 'CREATE USER {{ basex_server_username }} {{ basex_server_password }}'"

- name: setup Nestle Lowfat Treebank basex database
  hosts: staging, production
  tags: db
  become: yes
  become_user: "{{ basex_username }}"
  tasks:
    - name: clone treebanks from GitHub
      git:
        repo: "https://github.com/biblicalhumanities/greek-new-testament"
        dest: "{{ basex_data_abs_dir }}/nlf/repo"
        version: master
    - name: copy basex setup script
      template:
        src: templates/basex_setup.bxs
        dest: "{{ basex_data_abs_dir }}/basex_setup.bxs"
    - name: run basex setup script
      command: "basex {{ basex_data_abs_dir }}/basex_setup.bxs"

- name: clone repository
  hosts: staging, production
  tags: git, update
  become: yes
  become_user: "{{ anoixo_username }}"
  vars_files:
    - public_vars.yaml
  tasks:
    - name: clone application from GitHub
      git:
        repo: "{{ repo }}"
        dest: "{{ source_abs_dir }}"
        version: master
        force: yes

- name: instantiate private config
  hosts: staging, production
  tags: config, update
  become: yes
  become_user: "{{ anoixo_username }}"
  vars_files:
    - public_vars.yaml
  tasks:
    - name: create Nestle Lowfat Treebank provider config file for API
      template:
        src: templates/Nestle1904LowfatProvider_Config.py
        dest: "{{ api_abs_dir }}/text_providers/Nestle1904LowfatProvider_Config.py"
        mode: 0400
    - name: create ESV API provider config file for API
      template:
        src: templates/ESVApiTranslationProvider_Secret.py
        dest: "{{ api_abs_dir }}/translation_providers/ESVApiTranslationProvider_Secret.py"
        mode: 0400
    - name: create server settings for client app
      template:
        src: templates/AppSettings.ts
        dest: "{{ client_abs_dir }}/src/AppSettings.ts"

- name: prepare python backend
  hosts: staging, production
  tags: python, update
  become: yes
  become_user: "{{ anoixo_username }}"
  vars_files:
    - public_vars.yaml
  tasks:
    - name: create and populate python venv
      pip:
        virtualenv: "{{ venv_abs_dir }}"
        virtualenv_command: "{{ python3 }} -m venv venv"
        requirements: "{{ api_abs_dir }}/requirements.txt"

- name: build client app
  hosts: staging, production
  tags: ui, update
  become: yes
  become_user: "{{ anoixo_username }}"
  vars_files:
    - public_vars.yaml
  tasks:
    - name: install node modules for client app
      npm:
        path: "{{ client_abs_dir }}"

    - name: build client app
      command:
        chdir: "{{ client_abs_dir }}"
        cmd: npm run build

- name: provision supervisor to run python backend
  hosts: staging, production
  tags: supervisor
  become: yes
  vars_files:
    - public_vars.yaml
  tasks:
    - name: instantiate supervisor template
      template:
        src: templates/supervisor.conf
        dest: "{{ supervisor_conf_abs_dir }}/anoixo.conf"
        mode: 0444

    - name: ensure log directory exists
      file:
        path: "{{ logs_abs_dir }}"
        state: directory
        mode: 0755

- name: restart backend
  hosts: staging, production
  tags: supervisor, update
  become: yes
  tasks:
    - name: restart backend supervisor job
      supervisorctl:
        name: anoixo
        state: restarted

- name: setup password authentication
  hosts: production
  tags: nginx
  become: yes
  tasks:
    - name: setup passlib for Ansible htpasswd module
      apt:
        name: python-passlib
    - name: create htpasswd file
      htpasswd:
        path: "{{ htpasswd_path }}"
        name: "{{ app_auth_username }}"
        password: "{{ app_auth_password }}"

- name: provision nginx to serve frontend and backend
  hosts: staging, production
  tags: nginx
  become: yes
  vars_files:
    - public_vars.yaml
  tasks:
    - name: disable nginx default configuration
      file:
        path: "{{ nginx_enabled_abs_dir }}/default"
        state: absent

    - name: copy nginx config file
      template:
        src: "templates/{{ nginx_conf_template }}"
        dest: "{{ nginx_available_abs_dir }}/{{ nginx_conf_file }}"
        mode: 0444

    - name: enable nginx configuration
      file:
        src: "{{ nginx_available_abs_dir }}/{{ nginx_conf_file }}"
        dest: "{{ nginx_enabled_abs_dir }}/{{ nginx_conf_file }}"
        state: link

    - name: restart nginx
      service:
        name: nginx
        state: restarted